console.log("**** Propiedad .length ****");
/* Propiedad
 * üìå .length
 * - Devuelve el n√∫mero de caracteres de una cadena de texto.
 */

const texto = "¬°Hola mundo!";
console.log(texto.length);

console.log("**** M√©todo .indexOf() .lastIndexOf() ****");
/*
 * üìå .slice(start, end)
 * - Extrae una secci√≥n de una cadena y devuelve una nueva cadena sin modificar la cadena original.
 * - 'start': El √≠ndice base cero en el que comienza la extracci√≥n.
 * - 'end': (Opcional) El √≠ndice base cero antes del cual terminar la extracci√≥n.
 */

const resultado = texto.slice(1, 5);
console.log(resultado); // Output: Hola

console.log("**** M√©todo .slice() ****");

/*
 * üìå .slice()
 * - El m√©todo .slice() es usado para extraer una secci√≥n de una cadena de texto sin modificar la cadena original.
 * - Devuelve una nueva cadena de texto que contiene los caracteres de la cadena original desde el √≠ndice proporcionado
 *   en el primer par√°metro hasta el √≠ndice proporcionado en el segundo par√°metro (no incluido).
 * - 1er par√°metro (obligatorio): El √≠ndice desde donde queremos empezar a cortar.
 * - 2do par√°metro (opcional): El √≠ndice hasta donde queremos cortar (este √≠ndice no se incluye en el resultado).
 *   Si se omite este par√°metro, se extraer√° hasta el final de la cadena.
 */

// Encuentra el √≠ndice de la letra 'm' en la cadena 'texto'
const index = texto.indexOf("m");

// Encuentra el √∫ltimo √≠ndice de la letra 'o' en la cadena 'texto'
const lastIndex = texto.lastIndexOf("o");

// Usa .slice() para cortar la cadena desde el √≠ndice de 'm' hasta el √≠ndice de 'o' + 1
// El +1 es necesario porque el segundo par√°metro del m√©todo .slice() no se incluye en el resultado.
// As√≠ que al agregar +1, estamos incluyendo la letra 'o' en la nueva cadena.
console.log(texto.slice(index, lastIndex + 1)); // salida: "mundo"

/*
 * Alternativa usando √≠ndices negativos:
 * - .slice() tambi√©n acepta √≠ndices negativos, que cuentan desde el final de la cadena hacia atr√°s.
 * - Un √≠ndice negativo -1 representa el √∫ltimo car√°cter de la cadena, -2 el pen√∫ltimo, y as√≠ sucesivamente.
 * - Por lo tanto, .slice(-6, -1) tambi√©n cortar√° la cadena desde el √≠ndice de 'm' hasta el √≠ndice de 'o'.
 * - Nota: Al igual que antes, -1 no se incluye en el resultado, por lo que se corta hasta 'o' (√≠ndice -2).
 */
console.log(texto.slice(-6, -1)); // salida: "mundo"

console.log("**** M√©todo .replace() ****");

/*
 * üìå .replace()
 * - Devuelve una cadena de texto en donde se ha sustituido un valor por otro.
 * - 1er par√°metro: el texto que queremos reemplazar.
 * - 2do par√°metro: el texto con el que queremos reemplazar el texto original.
 *
 * En este caso:
 * - Se busca la palabra "mundo" en la cadena 'texto'.
 * - Se reemplaza la palabra "mundo" con la palabra "amigos".
 * - Como resultado, obtenemos una nueva cadena de texto con el reemplazo hecho,
 *   pero la cadena original 'texto' permanece sin cambios.
 *
 * Nota: .replace() solo reemplaza la primera coincidencia encontrada,
 * si se desea reemplazar todas las coincidencias, ser√≠a necesario usar una expresi√≥n regular con la bandera 'g'.
 */

console.log(texto.replace("mundo", "amigos")); // salida: "¬°Hola amigos!"

console.log("**** M√©todo .split() ****");
/*
 * üìå .split()
 * - Este m√©todo divide una cadena de texto en un arreglo de subcadenas, usando un delimitador especificado.
 * - 1er par√°metro: el caracter o la cadena que se usar√° como punto de divisi√≥n para separar la cadena original.
 *   En este caso, se usa un espacio en blanco (" ") como delimitador.
 *
 * En este caso:
 * - La cadena 'texto' se divide en dos subcadenas en cada lugar donde hay un espacio en blanco.
 * - Como resultado, obtenemos un arreglo con dos elementos: ["¬°Hola", "mundo!"].
 * - Cada elemento del arreglo es una parte de la cadena original 'texto', dividida por los espacios en blanco.
 *
 * Nota: Si la cadena original no contiene el delimitador especificado, el arreglo resultante tendr√° un solo elemento,
 * que ser√° la cadena original completa.
 */

const arrayText = texto.split(" "); // Retorna un arreglo: ["¬°Hola", "mundo!"]
console.log(arrayText);

console.log("**** M√©todo .toUpperCase() .toLowerCase ****");
/*
 * üìå .toUpperCase()
 * - Este m√©todo convierte todas las letras de una cadena de texto a may√∫sculas.
 * - No toma ning√∫n par√°metro.
 * - Retorna una nueva cadena con todas las letras en may√∫sculas.
 *
 * üìå .toLowerCase()
 * - Este m√©todo convierte todas las letras de una cadena de texto a min√∫sculas.
 * - No toma ning√∫n par√°metro.
 * - Retorna una nueva cadena con todas las letras en min√∫sculas.
 */

console.log(texto.toUpperCase()); // Retorna la cadena 'texto' con todas las letras en may√∫sculas
console.log(texto.toLowerCase()); // Retorna la cadena 'texto' con todas las letras en min√∫sculas
